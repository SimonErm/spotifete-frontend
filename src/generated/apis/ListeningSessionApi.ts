/* tslint:disable */
/* eslint-disable */
/**
 * Spotifete Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FullListeningSession,
    FullListeningSessionFromJSON,
    FullListeningSessionToJSON,
    NewListeningSessionRequest,
    NewListeningSessionRequestFromJSON,
    NewListeningSessionRequestToJSON,
    SimpleListeningSession,
    SimpleListeningSessionFromJSON,
    SimpleListeningSessionToJSON,
} from '../models';

export interface CloseListeningSessionRequest {
    joinId: string;
}

export interface CreateNewListeningSessionRequest {
    newListeningSessionRequest?: NewListeningSessionRequest;
}

export interface GetListeningSessionRequest {
    joinId: string;
}

/**
 * 
 */
export class ListeningSessionApi extends runtime.BaseAPI {

    /**
     */
    async closeListeningSessionRaw(requestParameters: CloseListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling closeListeningSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async closeListeningSession(requestParameters: CloseListeningSessionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.closeListeningSessionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createNewListeningSessionRaw(requestParameters: CreateNewListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SimpleListeningSession>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewListeningSessionRequestToJSON(requestParameters.newListeningSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleListeningSessionFromJSON(jsonValue));
    }

    /**
     */
    async createNewListeningSession(requestParameters: CreateNewListeningSessionRequest, initOverrides?: RequestInit): Promise<SimpleListeningSession> {
        const response = await this.createNewListeningSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getListeningSessionRaw(requestParameters: GetListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FullListeningSession>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling getListeningSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullListeningSessionFromJSON(jsonValue));
    }

    /**
     */
    async getListeningSession(requestParameters: GetListeningSessionRequest, initOverrides?: RequestInit): Promise<FullListeningSession> {
        const response = await this.getListeningSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
