/* tslint:disable */
/* eslint-disable */
/**
 * Spotifete Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticatedRequest,
    AuthenticatedRequestFromJSON,
    AuthenticatedRequestToJSON,
    ChangeFallbackPlaylistRequest,
    ChangeFallbackPlaylistRequestFromJSON,
    ChangeFallbackPlaylistRequestToJSON,
    DeleteRequestFromQueueRequest,
    DeleteRequestFromQueueRequestFromJSON,
    DeleteRequestFromQueueRequestToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FullListeningSession,
    FullListeningSessionFromJSON,
    FullListeningSessionToJSON,
    GetSessionQueueResponse,
    GetSessionQueueResponseFromJSON,
    GetSessionQueueResponseToJSON,
    NewListeningSessionRequest,
    NewListeningSessionRequestFromJSON,
    NewListeningSessionRequestToJSON,
    RequestTrackRequest,
    RequestTrackRequestFromJSON,
    RequestTrackRequestToJSON,
    SearchPlaylistResponse,
    SearchPlaylistResponseFromJSON,
    SearchPlaylistResponseToJSON,
    SearchTracksResponse,
    SearchTracksResponseFromJSON,
    SearchTracksResponseToJSON,
    SetFallbackPlaylistShuffleRequest,
    SetFallbackPlaylistShuffleRequestFromJSON,
    SetFallbackPlaylistShuffleRequestToJSON,
    SimpleListeningSession,
    SimpleListeningSessionFromJSON,
    SimpleListeningSessionToJSON,
} from '../models';

export interface ChangeFallbackPlaylistOperationRequest {
    joinId: string;
    changeFallbackPlaylistRequest?: ChangeFallbackPlaylistRequest;
}

export interface CloseListeningSessionRequest {
    joinId: string;
    authenticatedRequest?: AuthenticatedRequest;
}

export interface CreateNewListeningSessionRequest {
    newListeningSessionRequest?: NewListeningSessionRequest;
}

export interface DeleteRequestFromQueueOperationRequest {
    joinId: string;
    deleteRequestFromQueueRequest?: DeleteRequestFromQueueRequest;
}

export interface GetListeningSessionRequest {
    joinId: string;
}

export interface GetSessionQueueRequest {
    joinId: string;
}

export interface NewQueuePlaylistRequest {
    joinId: string;
    authenticatedRequest?: AuthenticatedRequest;
}

export interface QrCodeRequest {
    joinId: string;
    disableBorder: boolean;
}

export interface QueueLastUpdatedRequest {
    joinId: string;
}

export interface RefollowQueuePlaylistRequest {
    joinId: string;
    authenticatedRequest?: AuthenticatedRequest;
}

export interface RemoveFallbackPlaylistRequest {
    joinId: string;
    authenticatedRequest?: AuthenticatedRequest;
}

export interface RequestTrackOperationRequest {
    joinId: string;
    requestTrackRequest?: RequestTrackRequest;
}

export interface SearchPlaylistRequest {
    joinId: string;
    query: string;
    limit?: number;
}

export interface SearchTrackRequest {
    joinId: string;
    query: string;
    limit?: number;
}

export interface SetFallbackPlaylistShuffleOperationRequest {
    joinId: string;
    setFallbackPlaylistShuffleRequest?: SetFallbackPlaylistShuffleRequest;
}

/**
 * 
 */
export class ListeningSessionApi extends runtime.BaseAPI {

    /**
     */
    async changeFallbackPlaylistRaw(requestParameters: ChangeFallbackPlaylistOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling changeFallbackPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/fallback-playlist`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFallbackPlaylistRequestToJSON(requestParameters.changeFallbackPlaylistRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async changeFallbackPlaylist(requestParameters: ChangeFallbackPlaylistOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.changeFallbackPlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async closeListeningSessionRaw(requestParameters: CloseListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling closeListeningSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatedRequestToJSON(requestParameters.authenticatedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async closeListeningSession(requestParameters: CloseListeningSessionRequest, initOverrides?: RequestInit): Promise<void> {
        await this.closeListeningSessionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async createNewListeningSessionRaw(requestParameters: CreateNewListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SimpleListeningSession>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/new`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewListeningSessionRequestToJSON(requestParameters.newListeningSessionRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SimpleListeningSessionFromJSON(jsonValue));
    }

    /**
     */
    async createNewListeningSession(requestParameters: CreateNewListeningSessionRequest, initOverrides?: RequestInit): Promise<SimpleListeningSession> {
        const response = await this.createNewListeningSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteRequestFromQueueRaw(requestParameters: DeleteRequestFromQueueOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling deleteRequestFromQueue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/queue`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteRequestFromQueueRequestToJSON(requestParameters.deleteRequestFromQueueRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRequestFromQueue(requestParameters: DeleteRequestFromQueueOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRequestFromQueueRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getListeningSessionRaw(requestParameters: GetListeningSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FullListeningSession>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling getListeningSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullListeningSessionFromJSON(jsonValue));
    }

    /**
     */
    async getListeningSession(requestParameters: GetListeningSessionRequest, initOverrides?: RequestInit): Promise<FullListeningSession> {
        const response = await this.getListeningSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSessionQueueRaw(requestParameters: GetSessionQueueRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetSessionQueueResponse>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling getSessionQueue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/queue`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSessionQueueResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSessionQueue(requestParameters: GetSessionQueueRequest, initOverrides?: RequestInit): Promise<GetSessionQueueResponse> {
        const response = await this.getSessionQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async newQueuePlaylistRaw(requestParameters: NewQueuePlaylistRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling newQueuePlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/new-queue-playlist`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatedRequestToJSON(requestParameters.authenticatedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async newQueuePlaylist(requestParameters: NewQueuePlaylistRequest, initOverrides?: RequestInit): Promise<void> {
        await this.newQueuePlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async qrCodeRaw(requestParameters: QrCodeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling qrCode.');
        }

        if (requestParameters.disableBorder === null || requestParameters.disableBorder === undefined) {
            throw new runtime.RequiredError('disableBorder','Required parameter requestParameters.disableBorder was null or undefined when calling qrCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.disableBorder !== undefined) {
            queryParameters['disableBorder'] = requestParameters.disableBorder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/qrcode`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async qrCode(requestParameters: QrCodeRequest, initOverrides?: RequestInit): Promise<Blob> {
        const response = await this.qrCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async queueLastUpdatedRaw(requestParameters: QueueLastUpdatedRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetSessionQueueResponse>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling queueLastUpdated.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/queue/last-updated`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSessionQueueResponseFromJSON(jsonValue));
    }

    /**
     */
    async queueLastUpdated(requestParameters: QueueLastUpdatedRequest, initOverrides?: RequestInit): Promise<GetSessionQueueResponse> {
        const response = await this.queueLastUpdatedRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async refollowQueuePlaylistRaw(requestParameters: RefollowQueuePlaylistRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling refollowQueuePlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/refollow-queue-playlist`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatedRequestToJSON(requestParameters.authenticatedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async refollowQueuePlaylist(requestParameters: RefollowQueuePlaylistRequest, initOverrides?: RequestInit): Promise<void> {
        await this.refollowQueuePlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async removeFallbackPlaylistRaw(requestParameters: RemoveFallbackPlaylistRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling removeFallbackPlaylist.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/fallback-playlist`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatedRequestToJSON(requestParameters.authenticatedRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeFallbackPlaylist(requestParameters: RemoveFallbackPlaylistRequest, initOverrides?: RequestInit): Promise<void> {
        await this.removeFallbackPlaylistRaw(requestParameters, initOverrides);
    }

    /**
     */
    async requestTrackRaw(requestParameters: RequestTrackOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling requestTrack.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/request-track`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestTrackRequestToJSON(requestParameters.requestTrackRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async requestTrack(requestParameters: RequestTrackOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.requestTrackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async searchPlaylistRaw(requestParameters: SearchPlaylistRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SearchPlaylistResponse>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling searchPlaylist.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchPlaylist.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/search/playlist`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPlaylistResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchPlaylist(requestParameters: SearchPlaylistRequest, initOverrides?: RequestInit): Promise<SearchPlaylistResponse> {
        const response = await this.searchPlaylistRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchTrackRaw(requestParameters: SearchTrackRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SearchTracksResponse>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling searchTrack.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling searchTrack.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/search/track`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchTracksResponseFromJSON(jsonValue));
    }

    /**
     */
    async searchTrack(requestParameters: SearchTrackRequest, initOverrides?: RequestInit): Promise<SearchTracksResponse> {
        const response = await this.searchTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setFallbackPlaylistShuffleRaw(requestParameters: SetFallbackPlaylistShuffleOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.joinId === null || requestParameters.joinId === undefined) {
            throw new runtime.RequiredError('joinId','Required parameter requestParameters.joinId was null or undefined when calling setFallbackPlaylistShuffle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/session/id/{joinId}/refollow-queue-playlist/shuffle`.replace(`{${"joinId"}}`, encodeURIComponent(String(requestParameters.joinId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SetFallbackPlaylistShuffleRequestToJSON(requestParameters.setFallbackPlaylistShuffleRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setFallbackPlaylistShuffle(requestParameters: SetFallbackPlaylistShuffleOperationRequest, initOverrides?: RequestInit): Promise<void> {
        await this.setFallbackPlaylistShuffleRaw(requestParameters, initOverrides);
    }

}
